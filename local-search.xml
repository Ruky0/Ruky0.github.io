<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TinyHTTP概述</title>
    <link href="/2023/04/18/TinyHTTP%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/04/18/TinyHTTP%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>TinyHTTP是一个1999年的小项目, 五百多行代码写明了使用C&#x2F;C++进行网络编程的基本流程, 非常适合入门. 本文将从TinyHTTP要干什么, 怎么干成的, 以及如何运行TinyHTTP几个方面进行阐述.</p><h1 id="TinyHTTP的目标"><a href="#TinyHTTP的目标" class="headerlink" title="TinyHTTP的目标"></a>TinyHTTP的目标</h1><ol><li>实现一个多线程的服务器, 时刻监听请求, 每接收到一个新的请求便会新建一个进程处理该请求.</li><li>分析HTTP请求报文, 分辨是GET还是POST(仅实现这两种较为典型的方法).</li><li>根据方法的不同从报文中读出相关参数, 根据参数进行应答.</li><li>具体功能为根据用户输入的颜色改变显示的背景颜色, 该功能由一个CGI实现. </li><li>错误消息处理.</li></ol><h2 id="TinyHTTP的工作流程"><a href="#TinyHTTP的工作流程" class="headerlink" title="TinyHTTP的工作流程"></a>TinyHTTP的工作流程</h2><ol><li><p>服务器启动，在指定端口或随机选取端口绑定 httpd 服务。</p></li><li><p>收到一个 HTTP 请求时（其实就是 listen 的端口 accpet 的时候），派生一个线程运行 accept_request 函数。</p></li><li><p>取出 HTTP 请求中的 method (GET 或 POST) 和 url,。对于 GET 方法，如果有携带参数，则 query_string 指针指向 url 中 ？ 后面的 GET 参数。</p></li><li><p>格式化 url 到 path 数组，表示浏览器请求的服务器文件路径，在 tinyhttpd 中服务器文件是在 htdocs 文件夹下。当 url 以 &#x2F; 结尾，或 url 是个目录，则默认在 path 中加上 index.html，表示访问主页。</p></li><li><p>如果文件路径合法，对于无参数的 GET 请求，直接输出服务器文件到浏览器，即用 HTTP 格式写到套接字上，跳到（10）。其他情况（带参数 GET，POST 方式，url 为可执行文件），则调用 excute_cgi 函数执行 cgi 脚本。</p></li><li><p>读取整个 HTTP 请求并丢弃，如果是 POST 则找出 Content-Length. 把 HTTP 200  状态码写到套接字。</p></li><li><p>建立两个管道，cgi_input 和 cgi_output, 并 fork 一个进程。</p></li><li><p>在子进程中，把 STDOUT 重定向到 cgi_outputt 的写入端，把 STDIN 重定向到 cgi_input 的读取端，关闭 cgi_input 的写入端 和 cgi_output 的读取端，设置 request_method 的环境变量，GET 的话设置 query_string 的环境变量，POST 的话设置 content_length 的环境变量，这些环境变量都是为了给 cgi 脚本调用，接着用 execl 运行 cgi 程序。</p></li><li><p>在父进程中，关闭 cgi_input 的读取端 和 cgi_output 的写入端，如果 POST 的话，把 POST 数据写入 cgi_input，已被重定向到 STDIN，读取 cgi_output 的管道输出到客户端，该管道输入是 STDOUT。接着关闭所有管道，等待子进程结束。</p></li></ol><h2 id="TinyHTTP运行时注意事项"><a href="#TinyHTTP运行时注意事项" class="headerlink" title="TinyHTTP运行时注意事项"></a>TinyHTTP运行时注意事项</h2><p><em>总之先跑起来, 有助于理解整个项目</em></p><ol><li><p>Linux环境下注意删掉相关不兼容语句</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">To compile <span class="hljs-keyword">for</span> Linux:<br> <span class="hljs-number">1</span>) Comment out <span class="hljs-keyword">the</span> <span class="hljs-comment">#include &lt;pthread.h&gt; line.</span><br> <span class="hljs-number">2</span>) Comment out <span class="hljs-keyword">the</span> <span class="hljs-built_in">line</span> that defines <span class="hljs-keyword">the</span> <span class="hljs-built_in">variable</span> newthread.<br> <span class="hljs-number">3</span>) Comment out <span class="hljs-keyword">the</span> <span class="hljs-literal">two</span> <span class="hljs-keyword">lines</span> that run pthread_create().<br> <span class="hljs-number">4</span>) Uncomment <span class="hljs-keyword">the</span> <span class="hljs-built_in">line</span> that runs accept_request().<br> <span class="hljs-number">5</span>) Remove -lsocket <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> Makefile.<br></code></pre></td></tr></table></figure></li><li><p>安装Perl-cgi</p><p>Perl在Ubuntu上已默认安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">perl -MCPAN -e shell<br>(cpan)install CGI.pm<br>perl -MCGI -e &#x27;print &quot;CGI.pm version $CGI::VERSION\n&quot;;&#x27;# 检查是否安装成功<br></code></pre></td></tr></table></figure></li><li><p>修改color.cgi和check.cgi文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">which perl #查找一下perl路径<br></code></pre></td></tr></table></figure><p>将上述两文件第一句改成<code>#!+perl路径 -Tw</code>, 如:</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!/usr/bin/perl -Tw</span><br></code></pre></td></tr></table></figure></li><li><p>设置文件权限</p><p>在这步卡了很久,不搞这不能成功链接但是浏览器页面上一篇空白</p><p>在<code>htdocs</code>路径下修改<code>index.html</code>访问权限为不可执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod 600 index.html<br></code></pre></td></tr></table></figure><p>同时要保证两个cgi可以执行,否则输入颜色后一片空白</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod 777 color.cgi<br></code></pre></td></tr></table></figure></li><li><p>上述工作搞完之后直接make出可执行文件运行, 使用浏览器访问对应端口即可.</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>TinyHTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TinyHTTP项目基础</title>
    <link href="/2023/04/18/TinyHTTP%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/18/TinyHTTP%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>欲入门C++网络编程, 遂选择简单小巧经典的TinyHTTP项目进行学习, 顺便回顾计算机网络相关知识.</p><p>本文相关的理论知识有socket、HTTP、CGI</p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p><em>中文翻译为套接字(不明所以的翻译,感觉不如翻译成插座或者接口易于理解).</em></p><p>服务端与客户端相互访问的接口</p><p>TCP下使用socket的流程:</p><ol><li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li><li>服务端调用 <code>bind</code>，将绑定在 IP 地址和端口;</li><li>服务端调用 <code>listen</code>，进行监听；</li><li>服务端调用 <code>accept</code>，等待客户端连接；</li><li>客户端调用 <code>connect</code>，向服务器端的地址和端口发起连接请求；</li><li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li><li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li><li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭。</li></ol><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><em>超文本传输协议(Hyper Text Transfer Protocol)</em></p><p>超文本传输协议（HTTP）是一个用于传输超媒体文档（例如 HTML）的应用层协议。它是为 Web 浏览器与 Web 服务器之间的通信而设计的，但也可以用于其他目的。HTTP 遵循经典的客户端—服务端模型，客户端打开一个连接以发出请求，然后等待直到收到服务器端响应。HTTP 是无状态协议，这意味着服务器不会在两个请求之间保留任何数据（状态）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">HTTP | MDN (mozilla.org)</a></p><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/hello.txt</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>www.example.com<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en, mi<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/contact_form.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>developer.mozilla.org<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>64<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-llvm">name<span class="hljs-operator">=</span>Joe<span class="hljs-variable">%20</span>User&amp;request<span class="hljs-operator">=</span>Send<span class="hljs-variable">%20</span>me<span class="hljs-variable">%20</span><span class="hljs-keyword">one</span><span class="hljs-variable">%20</span>of<span class="hljs-variable">%20</span>your<span class="hljs-variable">%20</span>catalogue</span><br></code></pre></td></tr></table></figure><h4 id="起始行"><a href="#起始行" class="headerlink" title="起始行"></a>起始行</h4><p>HTTP 请求是由客户端发出的消息，用来使服务器执行动作。<em>起始行</em>（start-line）包含三个元素：</p><ol><li><p>一个 *<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods">HTTP 方法</a>*，一个动词（像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT"><code>PUT</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a>）或者一个名词（像 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD"><code>HEAD</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a>），描述要执行的动作。例如，<code>GET</code> 表示要获取资源，<code>POST</code> 表示向服务器推送数据（创建或修改资源，或者产生要返回的临时文件）。</p></li><li><p>请求目标</p><p>（request target），通常是一个</p><p>URL</p><p>，或者是协议、端口和域名的绝对路径，通常以请求的环境为特征。请求的格式因不同的 HTTP 方法而异。它可以是：</p><ul><li><p>一个绝对路径，末尾跟上一个<code>?</code>和查询字符串。这是最常见的形式，称为原始形式（origin form），被<code>GET</code> <code>POST</code> <code>HEAD</code>和<code>OPTIONS</code>方法所使用。</p><ul><li><code>POST / HTTP/1.1</code></li><li><code>GET /background.png HTTP/1.0</code></li><li><code>HEAD /test.html?query=alibaba HTTP/1.1</code></li><li><code>OPTIONS /anypage.html HTTP/1.0</code></li></ul></li><li><p>一个完整的 URL，被称为<em>绝对形式</em>（absolute form），主要在使用 <code>GET</code> 方法连接到代理时使用。<code>GET http://developer.mozilla.org/en-US/docs/Web/HTTP/Messages HTTP/1.1</code></p></li><li><p>由域名和可选端口（以 <code>&#39;:&#39;</code> 为前缀）组成的 URL 的 authority 部分，称为 <em>authority form</em>。仅在使用 <code>CONNECT</code> 建立 HTTP 隧道时才使用。<code>CONNECT developer.mozilla.org:80 HTTP/1.1</code></p></li><li><p><em>星号形式</em>（asterisk form），一个简单的星号（<code>&#39;*&#39;</code>），配合 <code>OPTIONS</code> 方法使用，代表整个服务器。<code>OPTIONS * HTTP/1.1</code></p></li></ul></li><li><p><em>HTTP 版本</em>（HTTP version），定义了剩余消息的结构，作为对期望的响应版本的指示符。</p></li></ol><h4 id="标头（Header）"><a href="#标头（Header）" class="headerlink" title="标头（Header）"></a>标头（Header）</h4><p>来自请求的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">HTTP 标头</a>遵循和 HTTP 标头相同的基本结构：不区分大小写的字符串，紧跟着的冒号（<code>&#39;:&#39;</code>）和一个结构取决于标头的值。整个标头（包括值）由一行组成，这一行可以相当长。</p><p>有许多请求标头可用，它们可以分为几组：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/General_header">通用标头（General header）</a>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Via"><code>Via</code></a>，适用于整个消息。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Request_header">请求标头（Request header）</a>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent"><code>User-Agent</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Type"><code>Accept-Type</code></a>，通过进一步的定义（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language"><code>Accept-Language</code></a>）、给定上下文（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a>）或者进行有条件的限制（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None"><code>If-None</code></a>）来修改请求。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Representation_header">表示标头（Representation header）</a>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 描述了消息数据的原始格式和应用的任意编码（仅在消息有主体时才存在）。</li></ul><h4 id="主体（Body）"><a href="#主体（Body）" class="headerlink" title="主体（Body）"></a>主体（Body）</h4><p>所有的请求都有一个主体：例如获取资源的请求，像 <code>GET</code>、<code>HEAD</code>、<code>DELETE</code> 和 <code>OPTIONS</code>，通常它们不需要主体。有些请求将数据发送到服务器以便更新数据：常见的的情况是 POST 请求（包含 HTML 表单数据）。</p><p>主体大致可分为两类：</p><ul><li>单一资源（Single-resource）主体，由一个单文件组成。该类型的主体由两个标头定义：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length"><code>Content-Length</code></a>。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types#multipartform-data">多资源（Multiple-resource）主体</a>，由多部分主体组成，每一部分包含不同的信息位。通常是和 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms">HTML 表单</a>连系在一起。</li></ul><h3 id="服务端响应消息"><a href="#服务端响应消息" class="headerlink" title="服务端响应消息"></a>服务端响应消息</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=utf-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>55743<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>s-maxage=300, public, max-age=0<br><span class="hljs-attribute">Content-Language</span><span class="hljs-punctuation">: </span>en-US<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Thu, 06 Dec 2018 17:37:18 GMT<br><span class="hljs-attribute">ETag</span><span class="hljs-punctuation">: </span>&quot;2e77ad1dc6ab0b53a2996dfd4653c1c3&quot;<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>meinheld/0.6.1<br><span class="hljs-attribute">Strict-Transport-Security</span><span class="hljs-punctuation">: </span>max-age=63072000<br><span class="hljs-attribute">X-Content-Type-Options</span><span class="hljs-punctuation">: </span>nosniff<br><span class="hljs-attribute">X-Frame-Options</span><span class="hljs-punctuation">: </span>DENY<br><span class="hljs-attribute">X-XSS-Protection</span><span class="hljs-punctuation">: </span>1; mode=block<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding,Cookie<br><span class="hljs-attribute">Age</span><span class="hljs-punctuation">: </span>7<br><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>A simple webpage<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Simple HTML webpage<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>HTTP 响应的起始行被称作<em>状态行</em>（status line），包含以下信息：</p><ol><li><em>协议版本</em>，通常为 <code>HTTP/1.1</code>。</li><li><em>状态码</em>（status code），表明请求是成功或失败。常见的状态码是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404"><code>404</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302"><code>302</code></a>。</li><li><em>状态文本</em>（status text）。一个简短的，纯粹的信息，通过状态码的文本描述，帮助人们理解该 HTTP 消息。</li></ol><p>一个典型的状态行看起来像这样：<code>HTTP/1.1 404 Not Found</code>。</p><h4 id="标头（Header）-1"><a href="#标头（Header）-1" class="headerlink" title="标头（Header）"></a>标头（Header）</h4><p>响应的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">HTTP 标头</a>遵循和任何其他标头相同的结构：不区分大小写的字符串，紧跟着的冒号（<code>&#39;:&#39;</code>）和一个结构取决于标头类型的值。整个标头（包括其值）表现为单行形式。</p><p>许多不同的标头可能会出现在响应中。这些可以分为几组：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/General_header">通用标头（General header）</a>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Via"><code>Via</code></a>，适用于整个消息。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Response_header">响应标头（Response header）</a>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary"><code>Vary</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Ranges"><code>Accept-Ranges</code></a>，提供有关服务器的其他信息，这些信息不适合状态行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Representation_header">表示标头（Representation header）</a>，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 描述了消息数据的原始格式和应用的任意编码（仅在消息有主体时才存在）。</li></ul><h4 id="主体（Body）-1"><a href="#主体（Body）-1" class="headerlink" title="主体（Body）"></a>主体（Body）</h4><p>响应的最后一部分是主体。不是所有的响应都有主体：具有状态码（如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201"><code>201</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204"><code>204</code></a>）的响应，通常不会有主体。</p><p>主体大致可分为三类：</p><ul><li>单资源（Single-resource）主体，由<strong>已知</strong>长度的单个文件组成。该类型主体由两个标头定义：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length"><code>Content-Length</code></a>。</li><li>单资源（Single-resource）主体，由<strong>未知</strong>长度的单个文件组成。通过将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding"><code>Transfer-Encoding</code></a> 设置为 <code>chunked</code> 来使用分块编码。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types#multipartform-data">多资源（Multiple-resource）主体</a>，由多部分 body 组成，每部分包含不同的信息段。但这是比较少见的。</li></ul><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>最常用的有POST和GET.</p><p>GET 方法请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据.</p><p>POST 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用.</p><h1 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h1><p><em>Common Gateway Interface, 通用网关接口</em></p><p>个人理解cgi为服务器上的一个可执行程序,可以被来自客户端的HTTP请求调用, 服务器接收请求并把这个请求给cgi处理, cgi处理完成后传给服务器,服务器再传给用户.</p><p>本项目中使用的是Perl编写的CGI.</p><p>POST方法往往会调用CGI.</p>]]></content>
    
    
    
    <tags>
      
      <tag>TinyHTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake</title>
    <link href="/2023/04/17/CMake/"/>
    <url>/2023/04/17/CMake/</url>
    
    <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h2 id="啥是CMake"><a href="#啥是CMake" class="headerlink" title="啥是CMake?"></a>啥是CMake?</h2><p>工程量比较大的时候手动进行链接、编译等工作十分复杂, 使用make进行批处理可以简化流程. Make使用的Makefile需要手动编写,编写这个文件有时也十分复杂, 所以CMake便出现来简化Makefile的流程.</p><p>CMake可以在文件(CMakeLists.txt)中配置编译、调试等步骤的参数, 之后调用指令便不用每次都敲g++、gdb和一堆参数.</p><p>VS中这一工作由IDE完成, IDE会帮你进行链接库之类的工作.</p><h2 id="咋用CMake"><a href="#咋用CMake" class="headerlink" title="咋用CMake?"></a>咋用CMake?</h2><p>编写CMakeLists.txt文件</p><p>在相应路径下调用cmake生成Makefile</p><p>然后调用make产生可执行文件</p><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><p>cmake_minimum_required - 指定CMake的最小版本要求</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># CMake最小版本要求为2.8.3</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">2.8</span>.<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>project - 定义工程名称，并可指定工程支持的语言</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 指定工程名为HELLOWORLD</span><br><span class="hljs-keyword">project</span>(HELLOWORLD)<br></code></pre></td></tr></table></figure><p>set - 显式的定义变量</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 定义SRC变量，其值为sayhello.cpp hello.cpp</span><br><span class="hljs-keyword">set</span>(SRC sayhello.cpp hello.cpp)<br></code></pre></td></tr></table></figure><p>include_directories - 向工程添加多个特定的头文件搜索路径 —&gt;相当于指定g++编译器的-I参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span><br><span class="hljs-keyword">include_directories</span>(/usr/<span class="hljs-keyword">include</span>/myincludefolder ./<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><p>target_include_directories-向目标添加头文件搜索路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_include_directories</span>(hello_library<br>        PUBLIC<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>        )<br></code></pre></td></tr></table></figure><p>link_directories - 向工程添加多个特定的库文件搜索路径 —&gt;相当于指定g++编译器的-L参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span><br><span class="hljs-keyword">link_directories</span>(/usr/lib/mylibfolder ./lib)<br></code></pre></td></tr></table></figure><p>add_library - 生成库文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 通过变量 SRC 生成 libhello.so 共享库(STATIC静态库)</span><br><span class="hljs-keyword">add_library</span>(hello SHARED <span class="hljs-variable">$&#123;SRC&#125;</span>)<br></code></pre></td></tr></table></figure><p>add_compile_options - 添加编译参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 添加编译参数 -Wall -std=c++11 -O2</span><br><span class="hljs-keyword">add_compile_options</span>(-Wall -std=c++<span class="hljs-number">11</span> -O2)<br></code></pre></td></tr></table></figure><p>add_executable - 生成可执行文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 编译main.cpp生成可执行文件main</span><br><span class="hljs-keyword">add_executable</span>(main main.cpp)<br></code></pre></td></tr></table></figure><p>target_link_libraries - 为 target 添加需要链接的共享库 —&gt;相同于指定g++编译器-l参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 将hello动态库文件链接到可执行文件main</span><br><span class="hljs-keyword">target_link_libraries</span>(main hello)<br></code></pre></td></tr></table></figure><p>add_subdirectory - 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 添加src子目录，src中需有一个CMakeLists.txt</span><br><span class="hljs-keyword">add_subdirectory</span>(src)<br></code></pre></td></tr></table></figure><h2 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h2><p>CMAKE_CXX_FLAGS g++编译选项</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span><br><span class="hljs-keyword">set</span>( CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)<br></code></pre></td></tr></table></figure><p>CMAKE_BUILD_TYPE 编译类型(Debug, Release)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 设定编译类型为debug，调试时需要选择debug</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Debug)<br><span class="hljs-comment"># 设定编译类型为release，发布时需要选择release</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Release)<br></code></pre></td></tr></table></figure><p>CMAKE_C_COMPILER：指定C编译器<br>CMAKE_CXX_COMPILER：指定C++编译器<br>EXECUTABLE_OUTPUT_PATH：可执行文件输出的存放路径<br>LIBRARY_OUTPUT_PATH：库文件输出的存放路径</p><p>。。。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>在项目同级目录下直接cmake会在该目录下产生Makefile和一堆杂乱的文件, 这种构建方式称为内部构建, 乱! 所以一般会新建一个build文件夹存放这一堆文件, 进入该文件夹cmake .. 即可.</li><li>include_directories是向整个工程添加头文件搜索路径; 而target_include_directories是为指定对象添加头文件搜索路径, 范围更小.</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cmake-test/                 工程主目录，<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> 调用 libhello-<br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── include            生成 libhello-world.so，调用 <br>│   └── static               生成 libhello<span class="hljs-selector-class">.so</span> <br>│       └── hello<span class="hljs-selector-class">.h</span>         libhello<span class="hljs-selector-class">.so</span> 对外的头文件<br>├── <span class="hljs-attribute">src</span>      <br>    ├── hello<span class="hljs-selector-class">.cpp</span><br>    └── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span>         libworld<span class="hljs-selector-class">.so</span> 对外的头文件<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-keyword">project</span>(hello_library)<br><br><span class="hljs-comment"># 生成一个静态库</span><br><span class="hljs-keyword">add_library</span>(hello_library STATIC<br>        src/hello.cpp<br>        )<br>        <br><span class="hljs-comment">#设置库所需的include</span><br><span class="hljs-keyword">target_include_directories</span>(hello_library<br>        PUBLIC<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>        )<br><br><span class="hljs-comment"># 生成可执行文件</span><br><span class="hljs-keyword">add_executable</span>(hello_binary<br>        src/main.cpp<br>        )<br><br><span class="hljs-comment"># 链接可执行文件所需的库文件</span><br><span class="hljs-keyword">target_link_libraries</span>(hello_binary<br>        PRIVATE<br>        hello_library<br>        )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>G++与GDB，编译与调试</title>
    <link href="/2023/04/17/Linux-C-%E5%BC%80%E5%8F%91/"/>
    <url>/2023/04/17/Linux-C-%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="G-与GDB，编译与调试"><a href="#G-与GDB，编译与调试" class="headerlink" title="G++与GDB，编译与调试"></a>G++与GDB，编译与调试</h1><h2 id="G-编译器"><a href="#G-编译器" class="headerlink" title="G++编译器"></a>G++编译器</h2><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ test.cpp -o test<br></code></pre></td></tr></table></figure><p>将test.cpp编译为名为test的二进制文件，-o参数后为指定的文件名。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -g test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成带调试信息的可执行文件，可供GDB进行调试</span><br><br>g++ -O2 test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">优化源代码(O0不优化,O1默认优化,O2额外优化,O3更多优化)</span><br><br>g++ -lglog test.cpp <br><span class="hljs-meta prompt_"># </span><span class="language-bash">链接glog库(直接使用小写l用于连接系统lib中有的库)</span><br><br>g++ -L/home/code/mytestlibfolder -lmytest test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">L用于指定库文件目录,l指定库文件</span><br><br>g++ -I/myInclude test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定头文件搜索目录</span><br><br>g++ -Wall test.cpp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-W打印警告信息,all打印所有警告信息</span><br><br>g++ -w test.cpp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭所有警告</span><br><br>g++ -std=c++11 test.cpp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用c++11标准进行编译</span><br></code></pre></td></tr></table></figure><h2 id="GDB调试器"><a href="#GDB调试器" class="headerlink" title="GDB调试器"></a>GDB调试器</h2><h3 id="进入调试程序"><a href="#进入调试程序" class="headerlink" title="进入调试程序"></a>进入调试程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gdb test #进入test的调试<br></code></pre></td></tr></table></figure><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">括号内为参数简写</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">help</span>(h)</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看命令帮助，具体命令查询在gdb中输入<span class="hljs-built_in">help</span> + 命令</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)run(r)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)start</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单步执行，运行程序，停在第一行执行语句</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)list(l)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">set</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置变量的值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)next(n)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单步调试（逐过程，函数直接执行）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)step(s)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单步调试（逐语句：跳入自定义函数内部执行）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)backtrace(bt)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看函数的调用的栈帧和层级关系</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)frame(f)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换函数的栈帧</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)info(i)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看函数内部局部变量的数值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)finish</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">结束当前函数，返回到函数调用点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">continue</span>(c)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">继续运行</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">print</span>(p)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印值及地址</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)quit(q)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出gdb</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">break</span>+num(b)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在第num行设置断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)info breakpoints</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前设置的所有断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)delete breakpoints num(d)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除第num个断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)display</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">追踪查看具体变量值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)undisplay</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消追踪观察变量</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)watch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">被设置观察点的变量发生修改时，打印显示</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)i watch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示观察点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">enable</span> breakpoints</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">disable</span> breakpoints</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁用断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)x</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看内存x/20xw 显示20个单元，16进制，4字节每单元</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)run argv[1] argv[2]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调试时命令行传参</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">set</span> follow-fork-mode child</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Makefile项目管理：选择跟踪父子进程（fork()）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/04/17/my-first-blog/"/>
    <url>/2023/04/17/my-first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="最近打算干什么"><a href="#最近打算干什么" class="headerlink" title="最近打算干什么?"></a>最近打算干什么?</h1><h2 id="2023-04-18"><a href="#2023-04-18" class="headerlink" title="2023-04-18"></a>2023-04-18</h2><p>学习C++网络开发: 计网基础知识–&gt;TinyHTTP–&gt;更为复杂的webserver项目</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
