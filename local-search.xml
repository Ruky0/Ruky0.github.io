<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMake</title>
    <link href="/2023/04/17/CMake/"/>
    <url>/2023/04/17/CMake/</url>
    
    <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h2 id="啥是CMake"><a href="#啥是CMake" class="headerlink" title="啥是CMake?"></a>啥是CMake?</h2><p>工程量比较大的时候手动进行链接、编译等工作十分复杂, 使用make进行批处理可以简化流程. Make使用的Makefile需要手动编写,编写这个文件有时也十分复杂, 所以CMake便出现来简化Makefile的流程.</p><p>CMake可以在文件(CMakeLists.txt)中配置编译、调试等步骤的参数, 之后调用指令便不用每次都敲g++、gdb和一堆参数.</p><p>VS中这一工作由IDE完成, IDE会帮你进行链接库之类的工作.</p><h2 id="咋用CMake"><a href="#咋用CMake" class="headerlink" title="咋用CMake?"></a>咋用CMake?</h2><p>编写CMakeLists.txt文件</p><p>在相应路径下调用cmake生成Makefile</p><p>然后调用make产生可执行文件</p><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><p>cmake_minimum_required - 指定CMake的最小版本要求</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># CMake最小版本要求为2.8.3</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">2.8</span>.<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>project - 定义工程名称，并可指定工程支持的语言</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 指定工程名为HELLOWORLD</span><br><span class="hljs-keyword">project</span>(HELLOWORLD)<br></code></pre></td></tr></table></figure><p>set - 显式的定义变量</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 定义SRC变量，其值为sayhello.cpp hello.cpp</span><br><span class="hljs-keyword">set</span>(SRC sayhello.cpp hello.cpp)<br></code></pre></td></tr></table></figure><p>include_directories - 向工程添加多个特定的头文件搜索路径 —&gt;相当于指定g++编译器的-I参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span><br><span class="hljs-keyword">include_directories</span>(/usr/<span class="hljs-keyword">include</span>/myincludefolder ./<span class="hljs-keyword">include</span>)<br></code></pre></td></tr></table></figure><p>target_include_directories-向目标添加头文件搜索路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_include_directories</span>(hello_library<br>        PUBLIC<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>        )<br></code></pre></td></tr></table></figure><p>link_directories - 向工程添加多个特定的库文件搜索路径 —&gt;相当于指定g++编译器的-L参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span><br><span class="hljs-keyword">link_directories</span>(/usr/lib/mylibfolder ./lib)<br></code></pre></td></tr></table></figure><p>add_library - 生成库文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 通过变量 SRC 生成 libhello.so 共享库(STATIC静态库)</span><br><span class="hljs-keyword">add_library</span>(hello SHARED <span class="hljs-variable">$&#123;SRC&#125;</span>)<br></code></pre></td></tr></table></figure><p>add_compile_options - 添加编译参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 添加编译参数 -Wall -std=c++11 -O2</span><br><span class="hljs-keyword">add_compile_options</span>(-Wall -std=c++<span class="hljs-number">11</span> -O2)<br></code></pre></td></tr></table></figure><p>add_executable - 生成可执行文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 编译main.cpp生成可执行文件main</span><br><span class="hljs-keyword">add_executable</span>(main main.cpp)<br></code></pre></td></tr></table></figure><p>target_link_libraries - 为 target 添加需要链接的共享库 —&gt;相同于指定g++编译器-l参数</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 将hello动态库文件链接到可执行文件main</span><br><span class="hljs-keyword">target_link_libraries</span>(main hello)<br></code></pre></td></tr></table></figure><p>add_subdirectory - 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 添加src子目录，src中需有一个CMakeLists.txt</span><br><span class="hljs-keyword">add_subdirectory</span>(src)<br></code></pre></td></tr></table></figure><h2 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h2><p>CMAKE_CXX_FLAGS g++编译选项</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span><br><span class="hljs-keyword">set</span>( CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)<br></code></pre></td></tr></table></figure><p>CMAKE_BUILD_TYPE 编译类型(Debug, Release)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 设定编译类型为debug，调试时需要选择debug</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Debug)<br><span class="hljs-comment"># 设定编译类型为release，发布时需要选择release</span><br><span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Release)<br></code></pre></td></tr></table></figure><p>CMAKE_C_COMPILER：指定C编译器<br>CMAKE_CXX_COMPILER：指定C++编译器<br>EXECUTABLE_OUTPUT_PATH：可执行文件输出的存放路径<br>LIBRARY_OUTPUT_PATH：库文件输出的存放路径</p><p>。。。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>在项目同级目录下直接cmake会在该目录下产生Makefile和一堆杂乱的文件, 这种构建方式称为内部构建, 乱! 所以一般会新建一个build文件夹存放这一堆文件, 进入该文件夹cmake .. 即可.</li><li>include_directories是向整个工程添加头文件搜索路径; 而target_include_directories是为指定对象添加头文件搜索路径, 范围更小.</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cmake-test/                 工程主目录，<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> 调用 libhello-<br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── include            生成 libhello-world.so，调用 <br>│   └── static               生成 libhello<span class="hljs-selector-class">.so</span> <br>│       └── hello<span class="hljs-selector-class">.h</span>         libhello<span class="hljs-selector-class">.so</span> 对外的头文件<br>├── <span class="hljs-attribute">src</span>      <br>    ├── hello<span class="hljs-selector-class">.cpp</span><br>    └── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span>         libworld<span class="hljs-selector-class">.so</span> 对外的头文件<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-keyword">project</span>(hello_library)<br><br><span class="hljs-comment"># 生成一个静态库</span><br><span class="hljs-keyword">add_library</span>(hello_library STATIC<br>        src/hello.cpp<br>        )<br>        <br><span class="hljs-comment">#设置库所需的include</span><br><span class="hljs-keyword">target_include_directories</span>(hello_library<br>        PUBLIC<br>        <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>        )<br><br><span class="hljs-comment"># 生成可执行文件</span><br><span class="hljs-keyword">add_executable</span>(hello_binary<br>        src/main.cpp<br>        )<br><br><span class="hljs-comment"># 链接可执行文件所需的库文件</span><br><span class="hljs-keyword">target_link_libraries</span>(hello_binary<br>        PRIVATE<br>        hello_library<br>        )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>G++与GDB，编译与调试</title>
    <link href="/2023/04/17/Linux-C-%E5%BC%80%E5%8F%91/"/>
    <url>/2023/04/17/Linux-C-%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="G-与GDB，编译与调试"><a href="#G-与GDB，编译与调试" class="headerlink" title="G++与GDB，编译与调试"></a>G++与GDB，编译与调试</h1><h2 id="G-编译器"><a href="#G-编译器" class="headerlink" title="G++编译器"></a>G++编译器</h2><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ test.cpp -o test<br></code></pre></td></tr></table></figure><p>将test.cpp编译为名为test的二进制文件，-o参数后为指定的文件名。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -g test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成带调试信息的可执行文件，可供GDB进行调试</span><br><br>g++ -O2 test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">优化源代码(O0不优化,O1默认优化,O2额外优化,O3更多优化)</span><br><br>g++ -lglog test.cpp <br><span class="hljs-meta prompt_"># </span><span class="language-bash">链接glog库(直接使用小写l用于连接系统lib中有的库)</span><br><br>g++ -L/home/code/mytestlibfolder -lmytest test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">L用于指定库文件目录,l指定库文件</span><br><br>g++ -I/myInclude test.cpp <br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定头文件搜索目录</span><br><br>g++ -Wall test.cpp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-W打印警告信息,all打印所有警告信息</span><br><br>g++ -w test.cpp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭所有警告</span><br><br>g++ -std=c++11 test.cpp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用c++11标准进行编译</span><br></code></pre></td></tr></table></figure><h2 id="GDB调试器"><a href="#GDB调试器" class="headerlink" title="GDB调试器"></a>GDB调试器</h2><h3 id="进入调试程序"><a href="#进入调试程序" class="headerlink" title="进入调试程序"></a>进入调试程序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gdb test #进入test的调试<br></code></pre></td></tr></table></figure><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">括号内为参数简写</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">help</span>(h)</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看命令帮助，具体命令查询在gdb中输入<span class="hljs-built_in">help</span> + 命令</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)run(r)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)start</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单步执行，运行程序，停在第一行执行语句</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)list(l)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">set</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置变量的值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)next(n)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单步调试（逐过程，函数直接执行）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)step(s)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单步调试（逐语句：跳入自定义函数内部执行）</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)backtrace(bt)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看函数的调用的栈帧和层级关系</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)frame(f)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换函数的栈帧</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)info(i)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看函数内部局部变量的数值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)finish</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">结束当前函数，返回到函数调用点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">continue</span>(c)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">继续运行</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">print</span>(p)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印值及地址</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)quit(q)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出gdb</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">break</span>+num(b)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在第num行设置断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)info breakpoints</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前设置的所有断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)delete breakpoints num(d)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除第num个断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)display</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">追踪查看具体变量值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)undisplay</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消追踪观察变量</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)watch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">被设置观察点的变量发生修改时，打印显示</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)i watch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示观察点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">enable</span> breakpoints</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">disable</span> breakpoints</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁用断点</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)x</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看内存x/20xw 显示20个单元，16进制，4字节每单元</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)run argv[1] argv[2]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调试时命令行传参</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">(gdb)<span class="hljs-built_in">set</span> follow-fork-mode child</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Makefile项目管理：选择跟踪父子进程（fork()）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/04/17/my-first-blog/"/>
    <url>/2023/04/17/my-first-blog/</url>
    
    <content type="html"><![CDATA[<p>笔记存档, 便于查阅;<br>督促学习;<br>满足收集欲;</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
